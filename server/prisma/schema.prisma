// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN // Admin will handle all management responsibilities
}

enum SubscriptionTier {
  FREE
  BASIC
  STANDARD
  PREMIUM
}

enum DeviceType {
  WEB
  MOBILE
  SMART_TV
  TABLET
  GAMING_CONSOLE
}

enum VideoQuality {
  SD
  HD
  FHD
  UHD_4K
  HDR
}

enum ContinueWatchingStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// Content Types
enum ContentType {
  MOVIE
  TV_SHOW
  DOCUMENTARY
  SHORT_FILM
  SPECIAL
}

// Content Maturity Ratings
enum MaturityRating {
  G // General Audiences
  PG // Parental Guidance Suggested
  PG_13 // Parents Strongly Cautioned
  R // Restricted
  NC_17 // Adults Only
  TV_Y // All Children
  TV_Y7 // Directed to Older Children
  TV_G // General Audience
  TV_PG // Parental Guidance Suggested
  TV_14 // Parents Strongly Cautioned
  TV_MA // Mature Audience Only
}

// Trailer types
enum TrailerType {
  URL // External URL (YouTube, Vimeo, etc.)
  UPLOADED // Self-hosted uploaded file
}

// Content source types
enum VideoSourceType {
  URL // External URL (streaming CDN, etc.)
  UPLOADED // Self-hosted uploaded file
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  firstName        String?
  lastName         String?
  role             UserRole @default(USER)
  isVerified       Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?

  // Profile Management
  profiles        Profile[]
  activeProfile   Profile?  @relation("ActiveProfile", fields: [activeProfileId], references: [id])
  activeProfileId String?

  // Subscription & Payment
  subscription Subscription?
  payments     Payment[]

  // Content Interaction
  watchHistory  WatchHistory[]
  watchlist     Watchlist[]
  ratings       Rating[]
  reviews       Review[]
  likes         Like[]
  searchHistory SearchHistory[]
  contentLists  ContentList[]

  // Device Management
  devices Device[]

  // Social Features
  followers Follow[] @relation("Following")
  following Follow[] @relation("Follower")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Additional user preferences
  preferredLanguage       String                  @default("en")
  notificationPreferences NotificationPreference?

  // Enhanced Streaming Features
  maxStreamingQuality VideoQuality @default(HD)
  simultaneousStreams Int          @default(1)
  downloadEnabled     Boolean      @default(false)

  // Content Preferences
  favoriteGenres    String[]
  contentLanguages  String[] @default(["en"])
  subtitleLanguages String[] @default(["en"])
  audioLanguages    String[] @default(["en"])

  // Viewing Preferences
  autoplayEnabled  Boolean @default(true)
  defaultSubtitles Boolean @default(false)
  defaultAudioLang String  @default("en")

  // Bandwidth Management
  dataSaverMode     Boolean @default(false)
  autoQualityAdjust Boolean @default(true)

  // Continue Watching
  continueWatching ContinueWatching[]

  // Download Management
  downloads Download[]

  // Recommendations
  viewingHistory  ViewingHistory[]
  recommendations Recommendation[]

  // Parental Controls
  parentalPin       String?
  maxMaturityRating Int     @default(18)
}

model Profile {
  id     String  @id @default(cuid())
  name   String
  avatar String?
  isKids Boolean @default(false)
  pin    String? // For parental controls

  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  activeFor User[] @relation("ActiveProfile")

  // Content preferences
  maturityLevel Int             @default(18)
  language      String          @default("en")
  reviews       Review[]
  // Viewing history specific to profile
  watchHistory  WatchHistory[]
  watchlist     Watchlist[]
  SearchHistory SearchHistory[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Subscription {
  id                 String           @id @default(cuid())
  userId             String           @unique
  user               User             @relation(fields: [userId], references: [id])
  tier               SubscriptionTier
  status             String // active, cancelled, suspended
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)

  // Payment details
  stripeCustomerId String?
  stripePriceId    String?

  // Trial management
  trialStart DateTime?
  trialEnd   DateTime?

  // Billing history
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Enhanced subscription features
  maxQuality             VideoQuality @default(HD)
  maxSimultaneousStreams Int          @default(1)
  downloadAllowed        Boolean      @default(false)
  adFree                 Boolean      @default(false)
  offlineViewing         Boolean      @default(false)

  // Family sharing
  maxProfiles          Int     @default(1)
  familySharingEnabled Boolean @default(false)

  // Billing features
  billingCycle    String // monthly, yearly
  nextBillingDate DateTime
  gracePeriodEnd  DateTime?
}

model Payment {
  id       String @id @default(cuid())
  amount   Float
  currency String @default("USD")
  status   String // succeeded, failed, pending

  // Relations
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String

  // Payment provider details
  stripePaymentId String?
  paypalPaymentId String?

  createdAt DateTime @default(now())
}

model Device {
  id         String     @id @default(cuid())
  deviceType DeviceType
  deviceName String
  lastActive DateTime

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotificationPreference {
  id                 String  @id @default(cuid())
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  newContent         Boolean @default(true)
  newsletters        Boolean @default(true)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model WatchHistory {
  id          String   @id @default(cuid())
  userId      String
  profileId   String
  episodeId   String?
  progress    Float    @default(0)
  completed   Boolean  @default(false)
  lastWatched DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])
  episode   Episode? @relation(fields: [episodeId], references: [id])
  Content   Content? @relation(fields: [contentId], references: [id])
  contentId String?

  @@unique([userId, profileId, episodeId])
  @@index([userId])
  @@index([profileId])
  @@index([episodeId])
}

model Watchlist {
  id String @id @default(cuid())

  // Relationships
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   String
  contentItem Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String

  createdAt DateTime @default(now())

  @@unique([profileId, contentId])
  @@index([userId])
  @@index([profileId])
  @@index([contentId])
}

model Rating {
  id    String @id @default(cuid())
  score Int // 1-10 rating

  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  contentItem Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model Review {
  id           String  @id @default(cuid())
  content      String  @db.Text
  rating       Int // 1-5 stars
  isPublished  Boolean @default(true)
  spoilerAlert Boolean @default(false)

  // Relationships
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   String
  contentItem Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String

  // Social aspects
  helpfulCount Int @default(0)
  reportCount  Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([contentId])
  @@index([rating])
}

model Like {
  id String @id @default(cuid())

  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  contentItem Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  profileId   String
  createdAt   DateTime @default(now())

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model Follow {
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model ContinueWatching {
  id                   String                 @id @default(cuid())
  user                 User                   @relation(fields: [userId], references: [id])
  userId               String
  contentItem          Content?               @relation(fields: [contentId], references: [id], onDelete: SetNull)
  contentId            String?
  profileId            String
  episode              Episode?               @relation(fields: [episodeId], references: [id], onDelete: SetNull)
  episodeId            String?
  progress             Float // Position in seconds
  completionPercentage Float // Completion percentage
  status               ContinueWatchingStatus
  lastWatched          DateTime               @default(now())

  @@index([userId])
  @@index([contentId])
  @@index([episodeId])
}

model Download {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  contentItem  Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId    String
  quality      VideoQuality
  expiresAt    DateTime
  downloadedAt DateTime     @default(now())
  size         Int // in bytes
  status       String // pending, completed, expired

  @@index([userId, contentId])
}

model ViewingHistory {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  contentItem Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  watchedAt   DateTime     @default(now())
  deviceType  DeviceType
  quality     VideoQuality
  duration    Int // Time watched in seconds

  @@index([userId, contentId])
}

model Recommendation {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  contentItem Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  score       Float // Recommendation score
  reason      String // Why this was recommended
  generatedAt DateTime @default(now())

  @@index([userId])
}

model SearchHistory {
  id    String @id @default(cuid())
  query String

  // Relationships
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([profileId])
  @@index([query])
}

model ContentList {
  id          String  @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean @default(true)

  // Relationships
  items       ContentListItem[]
  createdBy   User?             @relation(fields: [createdById], references: [id])
  createdById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
}

model ContentListItem {
  id    String @id @default(cuid())
  order Int

  // Relationships
  list      ContentList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String
  contentId String

  @@index([listId])
  @@index([contentId])
}

// Movie/Show Schema
model Content {
  id             String         @id @default(cuid())
  title          String
  description    String         @db.Text
  type           ContentType
  releaseYear    Int
  maturityRating MaturityRating
  duration       Int? // In minutes (for movies)
  posterImage    String // URL to poster image
  backdropImage  String? // URL to backdrop image

  // Trailer options
  trailerUrl  String? // External URL to trailer (YouTube, Vimeo, etc.)
  trailerFile String? // Path to uploaded trailer file
  trailerType TrailerType @default(URL) // Whether trailer is URL or uploaded file

  // Main video content options
  videoUrl        String? // External URL to video content
  videoFile       String? // Path to uploaded video file
  videoSourceType VideoSourceType @default(URL) // Whether video is URL or uploaded file

  // Video quality variants
  videoSD  String? // SD quality source
  videoHD  String? // HD quality source
  video4K  String? // 4K quality source
  videoHDR String? // HDR quality source

  featured   Boolean @default(false)
  trending   Boolean @default(false)
  newRelease Boolean @default(false)

  // Content details
  director String?
  studio   String?
  language String  @default("en")
  country  String?
  awards   String?

  // Streaming details
  availableFrom  DateTime  @default(now())
  availableUntil DateTime? // NULL means forever available

  // Quality options
  hasSD  Boolean @default(true)
  hasHD  Boolean @default(true)
  has4K  Boolean @default(false)
  hasHDR Boolean @default(false)

  // Audio and subtitles
  audioLanguages    String[] @default(["en"])
  subtitleLanguages String[] @default(["en"])

  // Relationships
  genres           GenreOnContent[]
    categories       CategoryOnContent[]  // Add this line

  cast             CastMember[]
  seasons          Season[] // For TV shows only
  reviews          Review[]
  ratings          Rating[]
  likes            Like[]
  watchHistory     WatchHistory[]
  watchlist        Watchlist[]
  continueWatching ContinueWatching[]
  downloads        Download[]
  viewingHistory   ViewingHistory[]
  recommendations  Recommendation[]

  // Metrics
  viewCount     Int    @default(0)
  averageRating Float? // Calculated field
  likeCount     Int    @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([releaseYear])
  @@index([maturityRating])
  @@index([featured])
  @@index([trending])
  @@index([newRelease])
  @@index([availableFrom, availableUntil])
}

// Genre Schema
model Genre {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  content     GenreOnContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Many-to-many relationship between Content and Genre
model GenreOnContent {
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String
  genre     Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId   String

  @@id([contentId, genreId])
  @@index([contentId])
  @@index([genreId])
}

// Cast Member Schema
model CastMember {
  id           String  @id @default(cuid())
  name         String
  role         String // Actor, Director, Producer, etc.
  character    String? // Character name (for actors)
  profileImage String? // URL to profile image

  // Relationships
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentId])
  @@index([name])
}

// TV Show Season Schema
model Season {
  id           String  @id @default(cuid())
  seasonNumber Int
  title        String?
  overview     String? @db.Text
  posterImage  String?
  releaseYear  Int?

  // Relationships
  show     Content   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId   String
  episodes Episode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([showId, seasonNumber])
  @@index([showId])
}

// TV Show Episode Schema
model Episode {
  id             String  @id @default(cuid())
  episodeNumber  Int
  title          String
  description    String? @db.Text
  duration       Int? // In minutes
  thumbnailImage String? // URL to thumbnail image

  // Main video content options
  videoUrl        String? // External URL to video content
  videoFile       String? // Path to uploaded video file
  videoSourceType VideoSourceType @default(URL) // Whether video is URL or uploaded file

  // Video quality variants
  videoSD  String? // SD quality source
  videoHD  String? // HD quality source
  video4K  String? // 4K quality source
  videoHDR String? // HDR quality source

  // Relationships
  season           Season             @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId         String
  watchHistory     WatchHistory[]
  continueWatching ContinueWatching[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([seasonId, episodeNumber])
  @@index([seasonId])
}
// Category Schema
model Category {
  id          String              @id @default(cuid())
  name        String              @unique
  description String?
  slug        String              @unique
  isActive    Boolean             @default(true)
  displayOrder Int                @default(0)
  content     CategoryOnContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Many-to-many relationship between Content and Category
model CategoryOnContent {
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  addedAt    DateTime @default(now())

  @@id([contentId, categoryId])
  @@index([contentId])
  @@index([categoryId])
}